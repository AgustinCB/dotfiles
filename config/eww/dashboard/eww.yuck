;; **
;; ** Widgets config for EWW
;; ** Created by : @adi1090x
;; ** Converted by : @tripleo1
;; **

;; ** Variables ***********************************************************************

;; Profile vars
(defvar IMAGE "images/profile.jpg")
(defvar NAME "AgustinCB")
(defpoll UNAME :interval "5m" `whoami`)

;; System vars
(defpoll HOST :interval "5s" `hostname`)
(defpoll CPU_USAGE :interval "1s" `scripts/sys_info --cpu`)
(defpoll MEM_USAGE :interval "1s" `scripts/sys_info --mem`)
(defpoll BLIGHT :interval "1s" `scripts/sys_info --blight`)
(defpoll BATTERY :interval "5s" `scripts/sys_info --bat`)

;; Time vars
(defpoll HOUR :interval "5s" `date +\"%I\"`)
(defpoll MIN :interval "5s" `date +\"%M\"`)
(defpoll MER :interval "5s" `date +\"%p\"`)
(defpoll DAY :interval "5s" `date +\"%A\"`)

;; Uptime vars
(defpoll UPHOUR :interval "5s" `uptime -p | awk '{print $2 \" \" $3}' | sed 's/,//g'`)
(defpoll UPMIN :interval "5s" `uptime -p | awk '{print $4 \" \" $5}'`)

;; Music vars
(defpoll SONG :interval "3s" `scripts/music_info --song`)
(defpoll ARTIST :interval "3s" `scripts/music_info --artist`)
(defpoll STATUS :interval "1s" `scripts/music_info --status`)
(defpoll CURRENT :interval "1s" `scripts/music_info --time`)
(defpoll COVER :interval "1s" `scripts/music_info --cover`)
(defpoll CTIME :interval "1s" `scripts/music_info --ctime`)
(defpoll TTIME :interval "1s" `scripts/music_info --ttime`)

;; Weather vars
(defpoll ICON :interval "15m" `scripts/weather_info --icon`)
(defpoll STAT :interval "15m" `scripts/weather_info --stat`)
(defpoll TEMP :interval "15m" `scripts/weather_info --temp`)
(defpoll HEX :interval "15m" `scripts/weather_info --hex`)
(defpoll QUOTE :interval "15m" `scripts/weather_info --quote`)
(defpoll QUOTE2 :interval "15m" `scripts/weather_info --quote2`)

;; Mails vars
(defpoll MAILS :interval "5m" `scripts/mails`)

;; Files vars
(defpoll FREE :interval "5s" `df -h / | awk '{print $4}' | tail -n 1 | sed 's/G/GB/'`)


;; ** Widgets *************************************************************************


;; background
(defwidget bg [] 
	(box :class "bg")
)

;; profile
(defwidget user [] 
	(box :class "genwin" :orientation "v" :spacing 35 :space-evenly "false" :vexpand "false" :hexpand "false"
		(box :style "background-image: url('${IMAGE}');" :class "face" :halign "center")
		(label :class "fullname" :halign "center" :wrap "true" :limit-width 25 :text NAME)
		(label :class "username" :halign "center" :wrap "true" :limit-width 25 :text UNAME)))

;; system
(defwidget system [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(box :orientation "v" :spacing 35 :halign "center" :valign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :class "cpu_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconcpu" :text "CPU: ${CPU_USAGE}%")
				(scale :min 0 :max 100 :value CPU_USAGE :active "false"))
			(box :class "mem_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconmem" :text "MEM: ${MEM_USAGE}%")
				(scale :min 0 :max 100 :value MEM_USAGE :active "false"))
			(box :class "bright_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbright" :text "BRI: ${BLIGHT}%")
				(scale :min 0 :max 100 :value BLIGHT :active "false"))
			(box :class "bat_bar" :orientation "h" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "iconbat" :text "BAT: ${BATTERY}%")
				(scale :min 0 :max 100 :value BATTERY :active "false")))))

;; clock
(defwidget clock [] 
	(box :class "genwin" :orientation "h" :spacing 50 :space-evenly false :vexpand "false" :hexpand "false" 
		(box :orientation "h" :spacing 0
			(label :class "time_hour" :valign "start" :wrap "true" :limit-width 25 :text HOUR)
			(label :class "time_min" :valign "end" :wrap "true" :limit-width 25 :text MIN))
		(box :orientation "v" :spacing 0 
			(label :class "time_mer" :valign "start" :halign "end" :wrap "true" :limit-width 25 :text MER)
			(label :class "time_day" :valign "end" :halign "end" :wrap "true" :limit-width 25 :text DAY))))

;; uptime
(defwidget uptime [] 
	(box :class "genwin" 
		(box :orientation "h" :halign "center" :spacing 40 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :class "icontimer" :valign "center" :text "祥")
			(box :orientation "v" :valign "center" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "uphour" :halign "start" :wrap "true" :limit-width 25 :text UPHOUR)
				(label :class "upmin" :halign "start" :wrap "true" :limit-width 25 :text UPMIN)))))

;; Music
(defwidget music [] 
	(box :class "genwin" :orientation "h" :space-evenly "true" :vexpand "false"
		(box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
		(box :orientation "v" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
			(label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
			(box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false" 
				(button :class "btn_prev" :onclick "bash -c 'spt pb --previous 2>/dev/null 1>/dev/null &'" "玲")
				(button :class "btn_play" :onclick "bash -c 'spt pb --toggle 2>/dev/null 1>/dev/null &'" STATUS)
				(button :class "btn_next" :onclick "bash -c 'spt pb --next 2>/dev/null 1>/dev/null &" "怜"))
			(box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false" 
				(scale :onscroll "mpc -q seek +1" :min 0 :active "true" :max 100 :value CURRENT)))))

;; reddit
(defwidget reddit [] 
	(box :class "reddit" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --rd" "樓")))

;; youtube
(defwidget youtube [] 
	(box :class "youtube" :vexpand "false" :hexpand "false" 
		(button :class "iconweb" :onclick "scripts/open_links --yt" "")))

;; mail
(defwidget mail [] 
	(box :class "mail" 
		(box :orientation "h" :halign "center" :spacing 20 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconmail" :onclick "scripts/open_links --mail" "")
			(box :class "mailbox" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(button :class "label_mails" :onclick "scripts/open_links --mail" MAILS)))))

;; weather
(defwidget weather [] 
	(box :class "genwin" 
		(box :orientation "v" :spacing 10 :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :orientation "h" :vexpand "false" :hexpand "false" 
				(label :class "iconweather" :halign "start" :style "color: ${HEX};" :text ICON)
				(label :class "label_temp" :halign "end" :text TEMP))
			(box :orientation "v" :spacing 10 :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "label_stat" :text STAT)
				(label :class "label_quote" :text QUOTE)
				(label :class "label_quote" :text QUOTE2)))))

;; power buttons
(defwidget logout [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_logout" :style "background-image: url('images/icons/logout.png'); background-repeat: no-repeat; background-position: center;" :onclick "/home/agustin/.local/bin/logout" :text FREE)))
(defwidget sleep [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_sleep" :onclick "systemctl suspend" :style "background-image: url('images/icons/sleep.png'); background-repeat: no-repeat; background-position: center;" :onclick "systemctl suspend" :text FREE)))
(defwidget reboot [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_reboot" :style "background-image: url('images/icons/restart.png'); background-repeat: no-repeat; background-position: center;" :onclick "systemctl reboot" :text FREE)))
(defwidget poweroff [] 
	(box :class "genwin" :vexpand "false" :hexpand "false" 
		(button :class "btn_poweroff" :style "background-image: url('images/icons/poweroff.png'); background-repeat: no-repeat; background-position: center;" :onclick "systemctl poweroff" :text FREE)))

;; folders
(defwidget folders [] 
	(box :class "genwin" :orientation "v" :space-evenly "false" :vexpand "false" :hexpand "false" 
		(box :class "hddbox" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(box :space-evenly "false" :vexpand "false" :hexpand "false"
				(button :class "hddicon" :onclick "scripts/open_folders --fm" "")
				(label :class "fs_sep" :text "|"))
			(box :space-evenly "false" :vexpand "false" :hexpand "false" 
				(label :class "hdd_label" :wrap "true" :limit-width 25 :text FREE)))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder1" :onclick "scripts/open_folders --projects" "")
			(button :class "label_folder1" :onclick "scripts/open_folders --projects" "~/projects"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder2" :onclick "scripts/open_folders --opt" "")
			(button :class "label_folder2" :onclick "scripts/open_folders --opt" "/opt"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder3" :onclick "scripts/open_folders --dl" "")
			(button :class "label_folder3" :onclick "scripts/open_folders --dl" "~/Downloads"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder4" :onclick "scripts/open_folders --cfg" "ﮛ")
			(button :class "label_folder4" :onclick "scripts/open_folders --cfg" "~/.config"))
		(box :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false" 
			(button :class "iconfolder5" :onclick "scripts/open_folders --local" "")
			(button :class "label_folder5" :onclick "scripts/open_folders --local" "~/.local"))))


;; ** Windows *************************************************************************


;; background
(defwindow background :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 0 :y 0 :width "2256px" :height "1504px")
					(bg))

;; profile
(defwindow profile :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 318 :y 362 :width 350 :height 440)
					(user))

;; system
(defwindow system :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 318 :y 817 :width 350 :height 325)
					(system))

;; clock
(defwindow clock :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 683 :y 362 :width 350 :height 155)
					(clock))

;; uptime
(defwindow uptime :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 683 :y 532 :width 350 :height 155)
					(uptime))

;; music
(defwindow music :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 683 :y 702 :width 915 :height 280)
					(music))

;; reddit
(defwindow reddit :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 683 :y 997 :width 297 :height 145)
					(reddit))

;; youtube
(defwindow youtube :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 995 :y 997 :width 298 :height 145)
					(youtube))

;; weather
(defwindow weather :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1048 :y 362 :width 550 :height 325)
					(weather))

;; mail
(defwindow mail :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1308 :y 997 :width 290 :height 145)
					(mail))

;; logout
(defwindow logout :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1613 :y 362 :width 155 :height 155)
					(logout))

;; sleep
(defwindow sleep :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1783 :y 362 :width 155 :height 155)
					(sleep))

;; reboot
(defwindow reboot :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1613 :y 532 :width 155 :height 155)
					(reboot))

;; poweroff
(defwindow poweroff :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1783 :y 532 :width 155 :height 155)
					(poweroff))

;; folders
(defwindow folders :stacking "fg" :focusable "false" :screen 1 
	    :geometry (geometry :x 1613 :y 702 :width 325 :height 440)
					(folders))
